---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Master stack:appache application stack'

Parameters:
  InstanceType:
    Default: t2.micro
    Type: String
  amiid:
    Default: ami-07cc15c3ba6f8e287
    Type: String
  pemkey:
    Default: apache
    Type: String
  cidr:
    Type: String
    Default: 10.0.0.0/16
  subnetcount:
    Type: String
    Default: "4" 
  subnetmask:
    Type: String
    Default: "8"
Resources:
#creating a vpc
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Apache
#creating subnets
  pubsubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: !Select [0, !Cidr [!Ref cidr, !Ref subnetcount, !Ref subnetmask]]
      Tags:
        - Key: Name
          Value: Ibex-pub-sub1
  pubsubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ""
      MapPublicIpOnLaunch: true  
      VpcId: !Ref myVPC
      CidrBlock: !Select [1, !Cidr [!Ref cidr, !Ref subnetcount, !Ref subnetmask]]
      Tags:
        - Key: Name
          Value: Ibex-pub-sub2
  privsubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: !Select [2, !Cidr [!Ref cidr, !Ref subnetcount, !Ref subnetmask]]
      Tags:
        - Key: Name
          Value: Ibex-priv-sub1
  privsubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: !Select [3, !Cidr [!Ref cidr, !Ref subnetcount, !Ref subnetmask]]
      Tags:
        - Key: Name
          Value: Ibex-priv-sub2
#creating route tables
  publicrouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: publicrouteTable
  privaterouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: privaterouteTable
#creating route table association
  pubrouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubsubnet1
      RouteTableId: !Ref publicrouteTable
  pubrouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubsubnet2
      RouteTableId: !Ref publicrouteTable
  privrouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privsubnet1
      RouteTableId: !Ref privaterouteTable
  privrouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privsubnet2
      RouteTableId: !Ref privaterouteTable
#creating an internet gateway
  igwName:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igwName
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref igwName 
#attaching igw
  igwroute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicrouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igwName
#creating Eip gateway
  eip:
    Type: AWS::EC2::EIP
    Properties:
     Domain: !Ref myVPC
#creating nat gateway
  natID:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt 'eip.AllocationId' #required
      SubnetId: !Ref pubsubnet1 #required
#attacing nat gateway
  natroute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privaterouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natID
#creating load balancer
  elbID:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      Subnets:
        - !Ref pubsubnet2
        - !Ref pubsubnet1
      Type: application 
#creating target group  
  targetID:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: '60'
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: apacheloadbalancer
      Port: '80'
      Protocol: HTTP
      VpcId: !Ref myVPC
#creating listners 
  listnersID:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref elbID #required
      Port: '80' #required
      Protocol: "HTTP" #required
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref targetID
#creating launch configuration
  launchconfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-0629b49b5dca512ca #required
      InstanceType: t2.micro #required
      KeyName: !Ref pemkey
      LaunchConfigurationName: launchconfiguration 
      SecurityGroups:
        - !Ref secGroup   
#creating security group
  secGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: securitygp for vpc and autoscaling 
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: securityuGroup  
#creating autoscaling group           
  asg:
   Type: AWS::AutoScaling::AutoScalingGroup
   Properties:
     DesiredCapacity: "1"
     TargetGroupARNs:
       - !Ref targetID
     HealthCheckGracePeriod: 120
     LaunchConfigurationName: !Ref launchconfig
     MaxSize: "4"
     MinSize: "1"
     Tags:
       - Key: Name
         Value:  Ibex-Dev-AG
         PropagateAtLaunch: True
     VPCZoneIdentifier:
       - !Ref pubsubnet1
       - !Ref pubsubnet2
#creating rote53
  LogicalID:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Name: String #required
      Region: String
      ResourceRecords:
        - String
      SetIdentifier: String
      TTL: String
      Type: String #required
      Weight: Integer
